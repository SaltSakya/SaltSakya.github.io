import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as o,d as r,a as s,b as n,e as t,w as u,f as a}from"./app-2685e7e5.js";const m="/unityshaderbible/44-0.png",d="/unityshaderbible/49-0.png",v="/unityshaderbible/61-0.png",h="/unityshaderbible/65-0.png",k="/unityshaderbible/67-0.png",g="/unityshaderbible/67-1.png",b="/unityshaderbible/68-0.png",y={},_=a(`<h2 id="_3-1-顶点-片元着色器的结构" tabindex="-1"><a class="header-anchor" href="#_3-1-顶点-片元着色器的结构" aria-hidden="true">#</a> 3.1 顶点/片元着色器的结构</h2><p>为了分析它的结构，我们要创建一个 <strong>Unlit 着色器</strong>并命名为“<strong>USB_simple_color</strong>”。 我们已经了解到，这种着色器是基础颜色模型，并且代码中没有过多的优化，这让我们可以深入分析其各种属性及方法。</p><p>当我们第一次创建材质时，Unity 会添加默认代码方便其编译过程。 在程序中，我们可以看见以这种 GPU 可以解释的方式组织的代码块。 如果我们打开 <strong>USB_simple_color</strong> 着色器，它的结构应该像这样：</p><details class="hint-container details"><summary>USB_simple_color 代码</summary><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;Unlit/USB_simple_color&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">&quot;Texture&quot;</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Tags <span class="token punctuation">{</span><span class="token string">&quot;RenderType&quot;</span><span class="token operator">=</span><span class="token string">&quot;Opaque&quot;</span><span class="token punctuation">}</span>
    LOD <span class="token number">100</span>

    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vertex vert</span></span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">fragment frag</span></span>
      <span class="token comment">// make fog work</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">multi_compile_fog</span></span>

      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UnityCG.cginc&quot;</span></span>
      <span class="token keyword">struct</span> <span class="token class-name">appdata</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">float4</span> vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
        <span class="token keyword">float2</span> uv <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">struct</span> <span class="token class-name">v2f</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">float2</span> uv <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
        <span class="token function">UNITY_FOG_COORDS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">float4</span> vertex <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">sampler</span> 2D _MainTex<span class="token punctuation">;</span>
      <span class="token keyword">float4</span> _MainTex<span class="token punctuation">;</span>

      v2f <span class="token function">vert</span> <span class="token punctuation">(</span>appdata v<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        v2f o<span class="token punctuation">;</span>
        o<span class="token punctuation">.</span>vertex <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        o<span class="token punctuation">.</span>uv <span class="token operator">=</span> <span class="token function">TRANSFORM_TEX</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>uv<span class="token punctuation">,</span> _MainTex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">UNITY_TRANSFER_FOG</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> o<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> o<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      fixed <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
      <span class="token punctuation">{</span>
        <span class="token comment">// sample the texture</span>
        fixed4 col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// apply fog</span>
        <span class="token function">UNITY_APPLY_FOG</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>fogCoord<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> col<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      ENDCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>我们大概不完全理解我们刚创建的着色器中，不同的代码块中到底发生了什么。 但是，要开始我们的学习，我们需要关注它的常规结构。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token comment">// properties in this field</span>
  <span class="token punctuation">}</span>

  SubShader
  <span class="token punctuation">{</span>
    <span class="token comment">// SubShader configuration in this field</span>
    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token comment">// programa Cg - HLSL in this field</span>
      ENDCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  Fallback <span class="token string">&quot;ExampleOtherShader&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div style="text-align:center;"><p>(Cg 和 HLSL 的着色器结构都是相同的，唯一的不同在于 Cg 和 HLSL <br> 的程序块。为了兼容性，两者都能在最新版的 Unity 中编译。)</p></div><p>前面的示例展示了着色器的主要结构。着色器以它在 <strong>Inspector</strong> 中的路径（InspectorPath）和<strong>名称</strong>（shaderName）开始，之后是<strong>属性</strong>（如材质、向量、颜色等），再之后是<strong>子材质</strong>，最后是可选的<strong>回退</strong>。</p><p>“InspectorPath”代表我们要选择要应用到材质的着色器的位置。 这个选择是在 Unity 的 Inspector 中进行的。</p><p>我们要记住，我们不能直接将着色器应用到一个多边形物体上，我们需要先创建一个材质，才能将其应用到多边形物体上。 我们的 USB_simple_color 着色器默认路径是“Unlit”，这意味着：对于 Unity，我们需要先选择我们的材质，在 Inspector 面板中，找到路径 Unlit 并应用 USB_simple_color。</p><p>我们必须要知道的一个结构因素是，GPU 会从上到下线性地阅读代码，因此如果我们快速创建了一个函数，并把它写在了使用它的代码块下方，GPU 就无法阅读到它，于是就会在着色器处理中产生一个错误，于是回退就会指定另一个着色器，以便显卡可以继续其处理。</p><p>让我们做个小练习来理解这个概念。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// 1. declare out function 定义我们的函数</span>
<span class="token keyword">float4</span> <span class="token function">ourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// your code here ... 代码写在这里...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2. we use the function 使用函数</span>
fixed4 <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
<span class="token punctuation">{</span>
  <span class="token comment">// we are using the function here 在这里使用我们的函数</span>
  <span class="token keyword">float4</span> f <span class="token operator">=</span> <span class="token function">ourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数的与语法可能无法完全理解。 创建这些只是为了概念化一个函数与另一个函数的位置关系。</p>`,14),f=s("code",null,"ourFunction",-1),q=s("code",null,"ourFunction",-1),S=s("code",null,"frag",-1),x=a(`<p>让我们看看另一种情况。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// 2. we use the function 使用函数</span>
fixed4 <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
<span class="token punctuation">{</span>
  <span class="token comment">// we are using the function here 在这里使用我们的函数</span>
  <span class="token keyword">float4</span> f <span class="token operator">=</span> <span class="token function">ourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1. declare out function 定义我们的函数</span>
<span class="token keyword">float4</span> <span class="token function">ourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// your code here ... 代码写在这里...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对的，这个结构会产生一个“错误”，因为函数 <code>ourFunction</code> 被写在了使用它的地方下面。</p><h2 id="_3-2-shaderlab-着色器" tabindex="-1"><a class="header-anchor" href="#_3-2-shaderlab-着色器" aria-hidden="true">#</a> 3.2 ShaderLab 着色器</h2><p>我们编写着色器代码时，大多数都将从<strong>着色器</strong>的生命开始，随后是它在 <strong>Inspector</strong> 中的路径，最后是我们指定给它的<strong>名称</strong>（形如着色器“shader inspector path / shader name”）。</p><p>子着色器和回退之类的属性都是写在 ShaderLab 声明性语言的 “Shader” 域中的。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  <span class="token comment">// write ShaderLab code here 此处编写 ShaderLab 代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 USB_simple_color 已经默认声明了 “Unlit/USB_simple_color”，如果我们要将其指定给一个材质，我们就需要在 Unity 的 Inspector 中，找到 Unlit 路径，并选择“USB_simple_color”。</p><p>路径和名称都可以根据项目的规范要求来更改。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// default value 默认值</span>
Shader <span class="token string">&quot;Unlit / USB_simple_color&quot;</span>
<span class="token punctuation">{</span>
  <span class="token comment">// write ShaderLab code here 此处编写 ShaderLab 代码</span>
<span class="token punctuation">}</span>

<span class="token comment">// customize path to USB (Unity Shader Bible) Unity 着色器圣经的自定义路径</span>
Shader <span class="token string">&quot;USB / USB_simple_color&quot;</span>
<span class="token punctuation">{</span>
  <span class="token comment">// write ShaderLab code here 此处编写 ShaderLab 代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-shaderlab-属性" tabindex="-1"><a class="header-anchor" href="#_3-3-shaderlab-属性" aria-hidden="true">#</a> 3.3 ShaderLab 属性</h2><p>属性对应可在 Unity 的 Inspector 中调整的一系列参数。 共有 8 种数值和用处各不相同的属性。 无论是在动态地还是运行时，我们都可以使用这些与我们要创建或修改的着色器相关属性。 声明一个属性的语法如下：</p><div class="language-hsls line-numbers-mode" data-ext="hsls"><pre class="language-hsls"><code>PropertyName (&quot;display name&quot;, type) = defaultValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&quot;<strong>PropertyName</strong>&quot;表示属性名（如：_MainTex）， &quot;<strong>display name</strong>&quot;对应在 Unity 的 Inspector 中显示的属性名（如：Texture）， &quot;<strong>type</strong>&quot;指定了属性的类型（如：Color、Vector、2D 等）， 最后，顾名思义，&quot;<strong>defaultValue</strong>&quot;是指定给属性的默认值（例如，如果我们的属性是一个 “Color” 类型，我们可以设置它的默认值为 (1, 1, 1, 1)）。</p><figure><img src="`+m+`" alt="图 3.3a" tabindex="0" loading="lazy"><figcaption>图 3.3a</figcaption></figure><p>细看我们的 USB_simple_color 的<em>属性</em>，我们会注意到在属性域中已经声明了一个纹理属性，我们可以从下面这行代码中证实这一点。</p><div class="language-hsls line-numbers-mode" data-ext="hsls"><pre class="language-hsls"><code>Properties
{
  _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要考虑的一点是，当我们声明属性时，它要在属性域中保持“开放”的状态，因此我们要避免在代码行末尾添加分号（；），否则 GPU 会无法读取程序。</p><h3 id="_3-3-1-数字与滑块属性" tabindex="-1"><a class="header-anchor" href="#_3-3-1-数字与滑块属性" aria-hidden="true">#</a> 3.3.1 数字与滑块属性</h3><p>这些类型的属性让我们可以在 Shader 中添加数值。 假设我们要创建一个有照明功能的着色器，其中 0 表示 0% 照明，而 1 表示 100% 照明。我们可以为其创建一个范围（例如 Range(min, max)），并配置最小、最大和默认照明值。</p><p>下面的语法在着色器中声明了数字和滑块。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// name (&quot;display name&quot;, Range(min, max)) = defaultValue</span>
<span class="token comment">// name (&quot;display name&quot;, Float) = defaultValue</span>
<span class="token comment">// name (&quot;display name&quot;, Int) = defaultValue</span>

Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token function">_Specular</span> <span class="token punctuation">(</span><span class="token string">&quot;Specular&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.3</span>
    <span class="token function">_Factor</span> <span class="token punctuation">(</span><span class="token string">&quot;Color Factor&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.3</span>
    <span class="token function">_Cid</span> <span class="token punctuation">(</span><span class="token string">&quot;Color id&quot;</span><span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方的示例中，我们声明了三个属性，一个是名为 <strong>_Specular</strong> 的“浮点区间”类型，另一个是名为 <strong>_Factor</strong> 的“浮点缩放”类型，最后是一个叫 <strong>_Cid</strong> 的“整数”类型。</p><h3 id="_3-3-2-颜色与向量属性" tabindex="-1"><a class="header-anchor" href="#_3-3-2-颜色与向量属性" aria-hidden="true">#</a> 3.3.2 颜色与向量属性</h3><p>在这个属性中，我们可以在着色器中定义颜色或向量。</p><p>假设我们要创建一个可以在执行期间改变颜色的着色器，为此我们需要添加一个颜色属性，让我们可以修改着色器的 RGBA 值。</p><p>使用下面的语法在着色器中声明颜色和向量：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// name (&quot;display name&quot;, Color) = (R, G, B, A)</span>
<span class="token comment">// name (&quot;display name&quot;, Vector) = (0, 0, 0, 1)</span>

Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">&quot;Tint&quot;</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">_VPos</span> <span class="token punctuation">(</span><span class="token string">&quot;Vertex Position&quot;</span><span class="token punctuation">,</span> Vector<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方的示例中，我们声明了两个属性，一个名为 <strong>_Color</strong> 的“颜色”类型， 和一个名为 <strong>_VPos</strong> 的“向量”类型。</p><h3 id="_3-3-3-纹理属性" tabindex="-1"><a class="header-anchor" href="#_3-3-3-纹理属性" aria-hidden="true">#</a> 3.3.3 纹理属性</h3><p>这些属性让我们可以在着色器中实现纹理。</p><p>如果我们想在我们的物体（例如一个 3D 角色）上放一张纹理，我们需要为其添加一个 2D 属性作为纹理，随后通过一个名为“tex2D”的函数传入，这个函数需要两个参数：模型的纹理和UV坐标。</p><p>在电子游戏中常用的一个属性是“Cube”，它代表一个“立方贴图”，这种纹理在生成反射贴图时非常有用，例如，角色盔甲和金属元素的反射。</p><p>另一种我们能见到的贴图是 3D 类型的。这类贴图不像前一个那么常用，因为它是有体积的，并且有为空间计算的额外坐标。</p><p>如下语法可以在着色器种声明贴图：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// name (&quot;display name&quot;, 2D) = &quot;defaultColorTexture&quot;</span>
<span class="token comment">// name (&quot;display name&quot;, Cube) = &quot;defaultColorTexture&quot;</span>
<span class="token comment">// name (&quot;display name&quot;, 3D) = &quot;defaultColorTexture&quot;</span>

Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">&quot;Texture&quot;</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">_Reflection</span> <span class="token punctuation">(</span><span class="token string">&quot;Reflection&quot;</span><span class="token punctuation">,</span> Cube<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">_3DTexture</span> <span class="token punctuation">(</span><span class="token string">&quot;3D Texture&quot;</span><span class="token punctuation">,</span> 3D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有件很重要的事要考虑，那就是我们在声明属性的时候是写在 ShaderLab 声明性语言中，而程序则是写在 Cg 或 HLSL 语言中。 因为他们是两种不同的语言，所以我们需要创建“<strong>连接变量</strong>”</p><p>这些变量使用“uniform”全局声明，不过这一步可以跳过，因为程序会把它们识别为全局变量。 因此，要为“.shader”添加一个属性，我们必须先在 ShaderLab 中声明，然后在 Cg 或 HLSL 中声明同名变量，最后我们就可以使用了。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token comment">// declare the properties 声明属性</span>
    <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">&quot;Texture&quot;</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">&quot;Color&quot;</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token comment">// add connection variables 添加连接变量</span>
      sampler2D _MainTex<span class="token punctuation">;</span>
      <span class="token keyword">float4</span> _Color<span class="token punctuation">;</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">half4</span> <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
      <span class="token punctuation">{</span>
        <span class="token comment">// use the variables 使用变量</span>
        <span class="token keyword">half4</span> col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> col <span class="token operator">*</span> _Color<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      ENDCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们声明了两个属性：<strong>_MainTex</strong> 和 <strong>_Color</strong>。 之后我们在 CGPROGRAM 中创建了两个连接变量，他们对应了 <code>sampler2D _MainTex</code> 和 <code>float4 _Color</code>。 两个属性和两个连接变量必须有相同的名字，以便程序可以识别。</p><p>我们会在<a href="#">3.27 节</a> <mark>讲解关</mark>于数据类型的地方细说 2D 采样器的运算。</p><h2 id="_3-4-材质属性绘制器" tabindex="-1"><a class="header-anchor" href="#_3-4-材质属性绘制器" aria-hidden="true">#</a> 3.4 材质属性绘制器</h2><p>另一种我们可以在 ShaderLab 中找到的属性是“绘制器”（Drawer）。 这个类让我们可以在 Unity 的 Inspector 中生成自定义属性，从而促进着色器的条件编程。</p><p>默认情况下，这类属性没有包含在我们的着色器中，因此我们需要根据我们的需要进行声明。 目前为止，有七种不同的绘制器：</p><ul><li><strong>Toggle</strong>（开关）</li><li><strong>Enum</strong>（枚举）</li><li><strong>KeywordEnum</strong>（关键字枚举）</li><li><strong>PowerShlider</strong>（指数滑块）</li><li><strong>IntRange</strong>（整型范围）</li><li><strong>Space</strong>（空格）</li><li><strong>Header</strong>（标题）</li></ul><p>它们每一个都有特定的函数，且独立声明。</p><p>有了这些属性，我们可以在程序中生成多种状态，让我们无需运行时改变材质，即可创建动态效果。 我们通常和两种<strong>着色器变体</strong>一起使用这些绘制器，它们是 <strong>#pragma multi_compile</strong> 和 <strong>#shader_feature</strong>。</p><figure><img src="`+d+`" alt="图 3.4a" tabindex="0" loading="lazy"><figcaption>图 3.4a</figcaption></figure><h3 id="_3-4-1-mpd-开关" tabindex="-1"><a class="header-anchor" href="#_3-4-1-mpd-开关" aria-hidden="true">#</a> 3.4.1 MPD 开关</h3><p>在 ShaderLab 中，我们无法使用布尔类型参数，但是我们有 Toggle 可以实现同样的功能。 这个绘制器可以让我们通过条件来切换状态。 要使用它，我们要先在中括号之间写一个 <code>Toggle</code>，然后声明属性，注意，这个属性必须是 <code>Float</code> 类型的。 它的默认值必须是一个 <code>Integer</code>，0 或 1，为啥？因为 0 象征“关”，而 1 象征“开”。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token punctuation">[</span>Toggle<span class="token punctuation">]</span> <span class="token function">_PropertyName</span> <span class="token punctuation">(</span><span class="token string">&quot;Display Name&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如你所见，我们在中括号内添加了 Toggle，并声明了属性，接着是显示名，然后是 Float 数据类型，最后我们初始化属性为“关”，因为我们将它的默认值设定为 0。</p><p>在使用这种绘制器的时候要注意，如果我们想在代码中实现它，需要使用 <code>#pragma shader_feature</code>。 这是一种着色器变体，它的功能是根据输入（启用或禁用）产生不同的状态。 要理解它的执行情况，我们需要做以下操作：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">&quot;Color&quot;</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment">// declare drawer Toggle 声明开关</span>
    <span class="token punctuation">[</span>Toggle<span class="token punctuation">]</span> <span class="token function">_Enable</span> <span class="token punctuation">(</span><span class="token string">&quot;Enable ?&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  SubShader
  <span class="token punctuation">{</span>
    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token comment">// declare pragma 声明 pragma</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">shader_feature _ENABLE_ON</span></span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">float4</span> _Color<span class="token punctuation">;</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">half4</span> <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
      <span class="token punctuation">{</span>
        <span class="token keyword">half4</span> col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// generate conditions 生成状态</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">_ENABLE_ON</span></span>
        <span class="token keyword">return</span> col<span class="token punctuation">;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">return</span> col <span class="token operator">*</span> _Color<span class="token punctuation">;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token punctuation">}</span>
      ENDCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们声明了一个 Toggle 类型的属性 <code>_Enable</code>。 接着我们将其添加到 CGPROGRAM 的 <strong>shader_feature</strong> 中，然而，不同于程序中的属性，Toggle 被声明为 <code>_ENABLE_ON</code>，为何如此？ 添加到 shader_feature 变体中的变量是常量，因此是大写的，这意味着，如果我们的属性叫 <code>_Change</code>，那在着色器变体中，它需要添加为 <code>_CHANGE</code>。 而 <strong>_ON</strong> 对应 Toggle 的默认状态，因此，如果激活了 <code>_Enable</code> 属性，我们在片元着色阶段返回默认纹理颜色，否则我们将其乘上 <code>_Color</code> 属性。</p><p>值得一提的是，shader_feature 无法为一个应用编译多个变体，这是什么意思？ Unity 不会在最终构建中包含没有使用的变体，这意味着我们不能在运行时从一个状态移到另一个状态。 为此，我们得使用有“<strong>multi_compile</strong>”着色器变体的 KeywordEnum 绘制器。</p><h3 id="_3-4-2-mpd-关键字枚举" tabindex="-1"><a class="header-anchor" href="#_3-4-2-mpd-关键字枚举" aria-hidden="true">#</a> 3.4.2 MPD 关键字枚举</h3><p>这种绘制器会在材质 inspector 中生成一个<strong>弹出式</strong>菜单。 不同于 Toggle，这种绘制器让我们可以为着色器配置 9 种不同的状态。 为此我们必须在中括号添加 <code>KeywordEnum</code>，然后列出我们要用到的状态集合。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token punctuation">[</span><span class="token function">KeywordEnum</span><span class="token punctuation">(</span>StateOff<span class="token punctuation">,</span> State01<span class="token punctuation">,</span> etc<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token function">_PropertyName</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们在中括号中添加了 KeywordEnum 绘制器，然后列出了它的状态，这里第一个状态对应默认状态（StateOff）。 紧接着是属性的声明、在材质 inspector 种显示的名字、其 Float 数据类型和我们在最后初始化的默认值。</p><p>要在代码中声明这种绘制器，<strong>shader_feature</strong> 和 <strong>multi_compile</strong> 两种着色器变体都是可用的。 我们可以基于想要在最终构建中包含的变体数量来选择。</p><p>正如我们已经知道的，<code>shader_feature</code> 只会导出在材质 inspector 中选择的变体，而 <code>multi_compile</code> 则会导出所有在着色器中找到的变体，不论是否用到了它们。 有了这个特点，<code>multi_compile</code> 更适合导出或是编译多种会在执行期间改变的状态（如《超级马里奥》中的星星状态）。</p><p>为理解其实现，我们将执行以下操作：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InscpectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token comment">// declare drawer Toggle</span>
    <span class="token punctuation">[</span><span class="token function">KeywordEnum</span><span class="token punctuation">(</span>Off<span class="token punctuation">,</span> Red<span class="token punctuation">,</span> Blue<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token function">_Options</span> <span class="token punctuation">(</span><span class="token string">&quot;Color Options&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token comment">// declare pragma and conditions</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">multi_compile _OPTIONS_OFF _OPTIONS_RED _OPTIONS_BLUE</span></span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">half4</span> <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
      <span class="token punctuation">{</span>
        <span class="token keyword">half4</span> col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// generate conditions</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">_OPTIONS_OFF</span></span>
        <span class="token keyword">return</span> col<span class="token punctuation">;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">_OPTIONS_RED</span></span>
        <span class="token keyword">return</span> col <span class="token operator">*</span> <span class="token keyword">float4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">_OPTIONS_BLUE</span></span>
        <span class="token keyword">return</span> col <span class="token operator">*</span> <span class="token keyword">float4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token punctuation">}</span>
      ENDCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们声明了一个 KeywordEnum 类型属性，名为 <code>_Options</code>，并给它配置了三种状态（<code>Off</code>、<code>Red</code> 和 <code>Blue</code>）。 之后我们将他们添加到了 <code>CGPROGRAM</code> 中的 <code>multi_compile</code>，并将它们声明为常量。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">multi_compile _OPTIONS_OFF _OPTIONS_RED _OPTIONS_BLUE</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后使用这三种状态，我们为着色器定义了定义了这三种状态，对应改变主纹理的颜色。</p><h3 id="_3-4-3-mpd-枚举" tabindex="-1"><a class="header-anchor" href="#_3-4-3-mpd-枚举" aria-hidden="true">#</a> 3.4.3 MPD 枚举</h3><p>Enum 绘制器和 KeywordEnum 很相似，区别在于它可以定义一个“值/id”作为参数，并将其传入着色器中，以在 inspector 中动态地改变其功能。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token punctuation">[</span><span class="token function">Enum</span><span class="token punctuation">(</span>valor<span class="token punctuation">,</span> id_00<span class="token punctuation">,</span> valor<span class="token punctuation">,</span> id_01<span class="token punctuation">,</span> etc <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token function">_PropertyName</span> <span class="token punctuation">(</span><span class="token string">&quot;Display Name&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Enum</code> 不使用着色器变体，而是通过命令或函数来声明。 为了理解其实现，我们来执行下面的操作：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token comment">// declare drawer 声明绘制器</span>
    <span class="token punctuation">[</span><span class="token function">Enum</span><span class="token punctuation">(</span>Off<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Front<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Back<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token function">_Face</span> <span class="token punctuation">(</span><span class="token string">&quot;Face Culling&quot;</span><span class="token punctuation">,</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    <span class="token comment">// we use the property as a command 我们以命令的形式使用这个属性</span>
    Cull <span class="token punctuation">[</span>_Face<span class="token punctuation">]</span>
    Pass <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在给出的例子中，我们声明了一个 <code>Enum</code> 属性，名为 <code>_Face</code>，并将其值作为参数传递：Off：0、Front：1、Back：2。 之后我们将属性添加到子着色器中的 <code>Cull</code> 命令。 这样一来，我们就可以在 Unity 的 Inspector 中修改要渲染的物体表面。 在 <a href="">3.2.1 节</a><mark>中我们会详细讲解 <code>Cull</code> 命令。</mark></p><h3 id="_3-4-4-mpd-指数滑块和整型范围" tabindex="-1"><a class="header-anchor" href="#_3-4-4-mpd-指数滑块和整型范围" aria-hidden="true">#</a> 3.4.4 MPD 指数滑块和整型范围</h3><p>这些绘制器在处理数值范围和精度时很有用。 首先，我们可以用 <code>PowerSlider</code> 来生成用曲线控制的非线性的滑块。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token punctuation">[</span><span class="token function">PowerSlider</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token function">_PropertyName</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.08</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一方面，还有 <code>IntRange</code>，顾名思义，为整数值添加一个数字范围。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token punctuation">[</span>IntRange<span class="token punctuation">]</span> <span class="token function">_Property</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，如果我们想在着色器中使用这些属性，就要像传统属性一样声明在 <code>CGPROGRAM</code> 中。 要理解如何使用它，我们将执行以下操作：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token comment">// declare drawer 声明绘制器</span>
    <span class="token punctuation">[</span><span class="token function">PowerSlider</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token function">_Brightness</span> <span class="token punctuation">(</span><span class="token string">&quot;Brightness&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.08</span>
    <span class="token punctuation">[</span>IntRange<span class="token punctuation">]</span>
    <span class="token function">_Sample</span> <span class="token punctuation">(</span><span class="token string">&quot;Samples&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Pass
    <span class="token punctuation">{</span>
      CGPROGRAM
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token comment">// generate connection variables 生成连接变量</span>
      <span class="token keyword">float</span> _Brightness<span class="token punctuation">;</span>
      <span class="token keyword">int</span> _Samples<span class="token punctuation">;</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      ENGCG
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们声明了名为 <code>_Brightness</code> 的 <code>PowerSlider</code> 和一个名为 <code>_Samples</code> 的 <code>IntRange</code>。 最后使用相同的名字在 <code>CGPROGRAM</code> 中生成连接变量。</p><h3 id="_3-4-5-mpd-空格和标题" tabindex="-1"><a class="header-anchor" href="#_3-4-5-mpd-空格和标题" aria-hidden="true">#</a> 3.4.5 MPD 空格和标题</h3><p>最后这些绘制器在组织上很有帮助。</p><p><code>Space</code> 让我们在两个属性之间添加空格。 如果我们像让属性之间在材质 Inspector 中有间隔，我们可以在它们中间添加这个绘制器。</p><p>其语法如下</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token function">_PropertyName01</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> Float <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// we add the space 添加空格</span>
<span class="token punctuation">[</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token function">_PropertyName02</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> Float <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们在属性 <code>_PropertyName01</code> 和属性 <code>_PropertyName02</code> 之间添加了 10 点空格。 同样的，顾名思义，<code>Header</code> 可以在 Unity 的 Inspector 中添加一个标题。 这在在属性中生成目录很有用。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code><span class="token comment">// we add the header</span>
<span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span>Category name<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token function">_PropertyName01</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> Float <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token function">_PropertyName02</span> <span class="token punctuation">(</span><span class="token string">&quot;Display name&quot;</span><span class="token punctuation">,</span> Float <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们在属性之前添加了一个小标题，这个标题会显示在 Inspector 中。 要理解两个属性，我们将执行以下操作：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties
  <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span>Specular properties<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token function">_Specularity</span> <span class="token punctuation">(</span><span class="token string">&quot;Specularity&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.08</span>
    <span class="token function">_Brightness</span> <span class="token punctuation">(</span><span class="token string">&quot;Brightness&quot;</span><span class="token punctuation">,</span> <span class="token function">Range</span> <span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.08</span>
    <span class="token function">_SpecularColor</span> <span class="token punctuation">(</span><span class="token string">&quot;Specular Color&quot;</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span>Texture properties<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token function">_MainTex_</span> <span class="token punctuation">(</span><span class="token string">&quot;Texture&quot;</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  SubShader <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-5-shaderlab-子着色器" tabindex="-1"><a class="header-anchor" href="#_3-5-shaderlab-子着色器" aria-hidden="true">#</a> 3.5 ShaderLab 子着色器</h2><p>着色器的第二个组件就是子着色器。 每个着色器由至少一个子着色器组成，以便完美加载程序。 当由不止一个子着色器时，Unity 会处理每个子着色器，并根据硬件特性从上到下选择最合适的一个。 为了理解这一点，假设着色器要在支持<strong>金属图形</strong>API（iOS）的硬件上运行。 为此，Unity 会运行第一个支持金属图形的子着色器。 如果一个子着色器不支持，Unity 会尝试使用对应一个默认着色器的回退组件，如此一来硬件就可以继续它的任务，而不会产生图形错误。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    <span class="token comment">// shader configuration here 在这里编写着色器配置</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果仔细看我们的 <code>USB_Simple_Color</code> 着色器，子着色器会默认像下面这样：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;USB_USB_simple_color&quot;</span>
<span class="token punctuation">{</span>
  Properties <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Tags <span class="token punctuation">{</span> <span class="token string">&quot;RenderType&quot;</span><span class="token operator">=</span><span class="token string">&quot;Opaque&quot;</span> <span class="token punctuation">}</span>
    LOD <span class="token number">100</span>

    Pass <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-1-子着色器标签" tabindex="-1"><a class="header-anchor" href="#_3-5-1-子着色器标签" aria-hidden="true">#</a> 3.5.1 子着色器标签</h3><p><strong>标签</strong>时显示我们的着色器如何以及何时处理的标签</p><p>就像 GameObject 的标签，这些可以用来识别一个着色器要如何渲染，或一组着色器有何种图形表现。</p><p>所有标签的语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Tags
<span class="token punctuation">{</span>
  <span class="token string">&quot;TagName1&quot;</span><span class="token operator">=</span><span class="token string">&quot;TagValue1&quot;</span>
  <span class="token string">&quot;TagName2&quot;</span><span class="token operator">=</span><span class="token string">&quot;TagValue2&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些可以写在两种不同的域中，即 <code>SubShader</code> 中或 <code>Pass</code> 中。 这取决于我们想要获得的效果。 如果我们把标签写在 <code>SubShader</code> 中，它会影响 <code>SubShader</code> 中包含的所有 <code>Pass</code>，而如果我们把它写在 <code>Pass</code> 中，则它只会影响选中的 <code>Pass</code>。</p><p><code>Queue</code> 是一种我们经常用到的标签，因为它让我们可以定义物体表面的外观。 默认情况下，所有的表面都被定义为 <code>opaque</code>，即它们不透明。</p><p>看看我们的 <code>USB_simple_shader</code>，我们会在子着色器中找到这一行代码，它将我们的着色器定义为不透明。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>SubShader
<span class="token punctuation">{</span>
  Tags <span class="token punctuation">{</span> <span class="token string">&quot;RenderType&quot;</span><span class="token operator">=</span><span class="token string">&quot;Opaque&quot;</span> <span class="token punctuation">}</span>
  LOD <span class="token number">100</span>

  Pass <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5-1-1-queue-标签" tabindex="-1"><a class="header-anchor" href="#_3-5-1-1-queue-标签" aria-hidden="true">#</a> 3.5.1.1 Queue 标签</h4><p>默认情况下，这种标签并不会以代码的形式出现。 这是因为其默认在 GPU 上编译，它直接关联到每个材质的物体处理顺序。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Tags <span class="token punctuation">{</span> <span class="token string">&quot;Queue&quot;</span><span class="token operator">=</span><span class="token string">&quot;Geometry&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种标签和摄像机及 GPU 有着紧密的联系。</p><p>每次在场景中放置一个物体，我们都会将其信息发送给 GPU（如顶点位置、法线、颜色等）。 在<strong>游戏视图</strong>也是一样的，只是我们发送给 GPU 的信息对应于摄像机视锥体内的物体。 一旦信息进入 GPU，我们将这些数据发送给 VRAM，并让其在屏幕上绘制物体。</p><p>绘制物体的过程叫做“<strong>绘制调用</strong>”（Draw Call）。 着色器有越多的通道，在渲染时的绘制调用就越多。 一个通道就相当于一次绘制调用，因此，如果我们有一个两通道的着色器，那这个材质只会在 GPU 上产生两次<em>绘制调用</em>。</p><p>那么，GPU是如何将这些物体绘制到屏幕上的呢？ 简单来说，GPU 会先绘制离摄像机最远的物体，而最近的元素会在最后绘制。 此计算将依据物体与摄像机在其 Z 轴上距离。</p><figure><img src="`+v+`" alt="图 3.5.1.1a 如图所示，由于方形离摄像机最远，因此会最先绘制在屏幕上。最后绘制三角形，一共产生 2 次绘制调用" tabindex="0" loading="lazy"><figcaption>图 3.5.1.1a 如图所示，由于方形离摄像机最远，因此会最先绘制在屏幕上。最后绘制三角形，一共产生 2 次绘制调用</figcaption></figure><p>Unity 有一个称为“<strong>渲染队列</strong>”（Render Queue）的处理队列，他让我们可以修改物体在 GPU 上的处理顺序。 有两种方法可以修改渲染队列：</p><ol><li>通过 Inspector 中的材质属性。</li><li>或使用 <code>Queue</code> 标签。</li></ol><p>如果我们在着色器中修改 <code>Queue</code> 的值，材质中<em>渲染队列</em>的默认值也会一并修改。</p><p>这个属性是一个顺序值，取值范围在 0 到 5000 之间，其中 0 表示最远的元素，而5000表示离摄像机最近的元素。 这些顺序值有预定义的组，它们是：</p><ul><li><strong>Background</strong></li><li><strong>Geometry</strong></li><li><strong>AlphaTest</strong></li><li><strong>Transparent</strong></li><li><strong>Overlay</strong></li></ul><p><code>Tags { &quot;Queue&quot;=&quot;Background&quot; }</code> 取值 0~1499，默认为 1000；<br><code>Tags { &quot;Queue&quot;=&quot;Geometry&quot; }</code> 取值 1500~2399，默认为 2000；<br><code>Tags { &quot;Queue&quot;=&quot;AlphaTest&quot; }</code> 取值 2400~2699，默认为 2450；<br><code>Tags { &quot;Queue&quot;=&quot;Transparent&quot; }</code> 取值 2700~3599，默认为 3000；<br><code>Tags { &quot;Queue&quot;=&quot;Overlay&quot; }</code> 取值 3600~5000，默认为 4000；</p><p><strong>Background</strong> 主要用于那些离摄像机非常远的元素，如天空盒；</p><p><strong>Geometry</strong> 是队列中的默认值，用于场景中的不透明物体（如基本体和常规物体）。</p><p><strong>AlphaTest</strong> 用于必须先是在不透明物体前，但要显示在透明物体之后的半透明物体（如玻璃、草、植被）。</p><p><strong>Transparent</strong> 用于必须显示在其他元素前面的透明元素。</p><p>最后，<strong>Overlay</strong>对应那些在场景中显示在最前面的元素（如 UI、图片）。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Tags <span class="token punctuation">{</span> <span class="token string">&quot;Queue&quot;</span><span class="token operator">=</span><span class="token string">&quot;Geometry&quot;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HDRP 和内置 RP 使用渲染队列的方式有所不同，因为材质不会直接在 Inspector 中展示这个属性，而是引入了 2 种控制方式，它们是：</p><ul><li>材质顺序</li><li>渲染顺序</li></ul><p>HDRP 使用这两种排序方法来控制物体的处理。</p><h4 id="_3-5-1-2-rendertype-标签" tabindex="-1"><a class="header-anchor" href="#_3-5-1-2-rendertype-标签" aria-hidden="true">#</a> 3.5.1.2 RenderType 标签</h4><p>根据 Unity 官方文档，</p><blockquote><p>使用 <code>RenderType</code> 标签可覆盖 Shader 对象的行为。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p></blockquote><p>上面的说法是什么意思？ 基本上，使用这些标记，我们可以在子着色器中改变状态，在与给定类型匹配的任何材质上添加效果。</p><p>为了实现其功能，我们需要至少两个着色器：</p><ol><li>一个替换的（我们想要在运行时添加的颜色或效果）</li><li>一个要被替换的（指定给材质的着色器）</li></ol><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Tags <span class="token punctuation">{</span> <span class="token string">&quot;RenderType&quot;</span><span class="token operator">=</span><span class="token string">&quot;type&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和 Queue 标签一样，RenderType 也有不同的可配置值，这些值取决于我们想执行的任务。 其中有：</p><ul><li><strong>Opaque</strong>（默认）</li><li><strong>Transparent</strong></li><li><strong>TransparentCutout</strong></li><li><strong>Background</strong></li><li><strong>Overlay</strong></li><li><strong>TreeOpaque</strong></li><li><strong>TreeTransparentCutout</strong></li><li><strong>TreeBillboard</strong></li><li><strong>Grass</strong></li><li><strong>GrassBillboard</strong></li></ul><p>每次我们创建新着色器时，都会默认设置为 <code>Opaque</code> 。 同样，大多数 Unity 中的内置着色器都被设为了这个值，因为它们没有透明度的配置。 然而，我们可以自由地改变这个属性，一切都取决于我们想要应用的效果。</p><p>要彻底理解这个概念，我们要做以下的事。 在我们的工程中，</p><ol><li>我们要确保在场景中创建一些 3D 物体。</li><li>我们要创建一个 C# 脚本，名为 <code>USBReplacementController</code>。</li><li>之后我们要创建一个着色器，名为 <code>USB_replacement_shader</code>。</li><li>最后，我们要添加一个材质，名为 <code>USB_replaced_mat</code>。</li></ol><p>我们要使用 <code>Camera.SetReplacementShader</code> 来为材质 <code>USB_replaced_mat</code> 动态指定着色器。 要实现这个功能，材质着色器必须有一个 <code>RenderType</code> 标签和替换着色器相同。</p><p>为了演示，我么为 <code>USB_replaced_mat</code> 指定 <code>Mobile/Unlit</code>。 这个内置着色器配置 <code>RenderType</code> 为 <code>Opaque</code>。 因此，着色器 <code>USB_replacement_shader</code> 必须匹配相同的 <code>RenderType</code> 才能执行操作。</p><figure><img src="`+h+`" alt="图 3.5.1.2a 将 Unlit 着色器（支持光照贴图）指定给  材质" tabindex="0" loading="lazy"><figcaption>图 3.5.1.2a 将 Unlit 着色器（支持光照贴图）指定给 <code>USB_replaced_mat</code> 材质</figcaption></figure><p><code>USBReplacementController</code> 脚本必须直接作为组件挂载到摄像机。 这个控制器负责替换着色器，只要他们的 <code>RenderType</code> 配置相同即可。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collection<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ExecuteInEditMode</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBReplacementController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// replacement shader</span>
    <span class="token keyword">public</span> <span class="token class-name">Shader</span> m_replacementShader<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_replacementShader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// the camera will replace all the shaders in the scene with the replacement one the &quot;RenderType&quot; configuration must match in both shader</span>
            <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Camera<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetReplacementShader</span><span class="token punctuation">(</span>
                m_replacementShader<span class="token punctuation">,</span> <span class="token string">&quot;RenderType&quot;</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// let&#39;s reset the default shader</span>
        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Camera<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ResetReplacementShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，我们在类上方定义了 <code>[ExecuteInEditMode]</code> 功能。 这个属性让我们可以在编辑模式预览变化。</p><p>我们使用 <strong>USB_replacement_shader</strong> 作为替换着色器。</p><p>正如我们所知，每次我们创建一个新的着色器，它都会配置其 <code>RenderType</code> 为 <code>Opaque</code>。 因此，<strong>USB_replacement_shader</strong> 可以替换掉我们先前指定给材质的 Unlit 着色器。</p><p>为了让变化清晰可见，我们将在 <strong>USB_replacement_shader</strong> 的片元着色器阶段添加红色，乘上输出颜色。</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>fixed4 <span class="token function">frag</span> <span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
<span class="token punctuation">{</span>
  fixed4 col <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// add a red color 添加红色</span>
  fixed4 red <span class="token operator">=</span> <span class="token function">fixed4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> col <span class="token operator">*</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要确保在 <strong>USBReplacementController</strong> 脚本的着色器类型的替换变量中引用 <strong>USB_replacement_shader</strong> 。</p><figure><img src="`+k+'" alt="图 3.5.1.2b USBReplacementController 已指定给摄像机" tabindex="0" loading="lazy"><figcaption>图 3.5.1.2b USBReplacementController 已指定给摄像机</figcaption></figure><p>此外，那些我们之前添加到场景中的物体必须有材质 <strong>USB_replaced_mat</strong>。</p><figure><img src="'+g+'" alt="图 3.5.1.2c 材质 USB_replaced_mat 已指定到 3D 物体上，包括一个平面、一个盒体和一个球体" tabindex="0" loading="lazy"><figcaption>图 3.5.1.2c 材质 USB_replaced_mat 已指定到 3D 物体上，包括一个平面、一个盒体和一个球体</figcaption></figure><p>因为 <code>USBReplacementController</code> 类已包含 <code>OnEnable</code> 和 <code>OnDisable</code> 函数，如果我们激活或停用脚本，我们就能看见内置着色器 Unlit 是如何在编辑模式替换为 USB_replacement_shader 的，在渲染时应用了红颜色。</p><figure><img src="'+b+`" alt="图 3.5.1.2d USB_replacement_shader 在最终渲染中替换了内置着色器 Unlit" tabindex="0" loading="lazy"><figcaption>图 3.5.1.2d USB_replacement_shader 在最终渲染中替换了内置着色器 Unlit</figcaption></figure><h3 id="_3-5-2-子着色器混合" tabindex="-1"><a class="header-anchor" href="#_3-5-2-子着色器混合" aria-hidden="true">#</a> 3.5.2 子着色器混合</h3><p>混合是将两个像素混合成一个的过程。 其指令在内置 RP 和可编程 RP 都是兼容的。</p><p><em>混合</em>发生在名为“<strong>合并</strong>”（merging）的阶段，它将像素（指在片元着色器阶段处理过的像素）的最终颜色和它的深度结合。 这个阶段，发生在渲染管线的最后，在<strong>片元着色器阶段</strong>之后，也是执行模板缓冲、z 缓冲和颜色混合的阶段。</p><p>默认情况下，这个属性不会写在着色器中，因为这是一个可选功能，且主要用于我们处理透明物体时，例如，例如我们要在一个物体前绘制一个不透明度较低的像素时。</p><div class="hint-container tip"><p class="hint-container-title">Alpha vs. Tranparency vs. Opacity</p><p>这三个是什么？好像经常会在见到用这些词来描述透明的物体，有什么区别呢？</p><ul><li>Transparency：透明度，简单来说，透明度越高，物体越透明。</li><li>Opacity：有些地方也把它翻译为“透明度”，但正确的翻译应该是“不透明度”，因为 “Low Opacity”意为物体透明。</li><li>Alpha：一般用在描述颜色时，RGBA 中的 A，表示<strong>不透明度</strong>。</li></ul></div><p>其默认值为“Blend Off”（关闭混合），但我们可以启动它来生成不同类型的<em>混合</em>，就像 PS 中的那样。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Blend <span class="token punctuation">[</span>SourceFactor<span class="token punctuation">]</span> <span class="token punctuation">[</span>SestinationFactor<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Blend</code> 是一个需要两个值进行运算的函数，这两个值称为“因子”（factors），根据一个算式算出屏幕上的最终颜色。 根据 Unity 官方文档，这个定义了混合值的算式如下：</p>`,170),w=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mi",null,"S"),s("mi",null,"r"),s("mi",null,"c"),s("mi",null,"F"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"r"),s("mo",null,"∗"),s("mi",null,"S"),s("mi",null,"r"),s("mi",null,"c"),s("mi",null,"V"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e"),s("mo",{stretchy:"false"},"["),s("mi",null,"O"),s("mi",null,"P"),s("mo",{stretchy:"false"},"]"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"F"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"r"),s("mo",null,"∗"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"V"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e")]),s("annotation",{encoding:"application/x-tex"},"B = SrcFactor * SrcValue [OP] DstFactor * DstValue")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord mathnormal"},"rc"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord mathnormal"},"rc"),s("span",{class:"mord mathnormal"},"Va"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"OP"),s("span",{class:"mclose"},"]"),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"tF"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"Va"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e")])])])])],-1),B=a("<p>要理解这个运算，我们要考虑如下：先发生<strong>片元着色器阶段</strong>，然后才是作为可选过程的<strong>混合阶段</strong>。</p><p>“<strong>SrcValue</strong>”（source value）已在<strong>片元着色器阶段</strong>处理，对应像素的 RGB 颜色输出。</p><p>“<strong>DstValue</strong>”（destination value）对应已经写入到“目标缓冲”（destination buffer）中的 RGB 颜色，也被称为渲染目标（render target）<code>SV_Target</code>。 当着色器中的混合选项未激活时，SrcValue 会覆写 DstValue。 然而，如果我们激活这个运算，两种颜色会混合成一个新颜色，并覆写之前的 DstValue。</p><p>“<strong>SrcFator</strong>”（source factor）和“<strong>DstFactor</strong>”（destination factor）是可配置的三维向量。 它们的主要功能是修改 SrcValue 和 DstValue 的值以得到有趣的效果。</p><p>我们可以在 Unity 文档种找到的因子有：</p><ul><li><strong>Off</strong>，禁用混合选项。</li><li><strong>One</strong>，<code>(1, 1, 1)</code>。</li><li><strong>Zero</strong>，<code>(0, 0, 0)</code>。</li><li><strong>SrcColor</strong> 等于 <em>SrcValue</em> 的 RGB 值。</li><li><strong>SrcAlpha</strong> 等于 <em>SrcValue</em> 的 Alpha 值。</li><li><strong>OneMinusSrcColor</strong>，1 减 <em>SrcValue</em> 的 RGB 值<code>(1 - R, 1 - G, 1 - B)</code>。</li><li><strong>OneMinusSrcAlpha</strong>，1 减 <em>SrcValue</em> 的 Alpha 值<code>(1 - A, 1 - A, 1 - A)</code>。</li><li><strong>DstColor</strong> 等于 <em>DstValue</em> 的 RGB 值。</li><li><strong>DstAlpha</strong> 等于 <em>DstValue</em> 的 Alpha 值。</li><li><strong>OneMinusDstColor</strong>，1 减 <em>DstValue</em> 的 RGB 值<code>(1 - R, 1 - G, 1 - B)</code>。</li><li><strong>OneMinusDstAlpha</strong>，1 减 <em>DstValue</em> 的 Alpha 值<code>(1 - A, 1 - A, 1 - A)</code>。</li></ul><p>值得一提的是，Alpha 通道的混合和处理像素 RGB 颜色的方式相同，但因为它并不常用，因此是在单独的过程中处理。 同样，通过不执行这个过程，可以优化向渲染目标的写入。</p><p>让我们用如下的例子解释上述问题。</p>",8),R=s("p",null,[n("假设我们有一个 RGB 颜色像素，其值为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0.5_R, 0.45_G, 0.35_B]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])]),n("。 这个颜色经过"),s("strong",null,"片元着色器阶段"),n("处理，因此对应 "),s("em",null,"DstValue"),n("。 现在，我们用“"),s("em",null,"SrcFactor"),n(),s("strong",null,"One"),n("”（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[1, 1, 1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),n("）乘上这个值。")],-1),P=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mi",null,"O"),s("mi",null,"P"),s("mo",{stretchy:"false"},"]"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"F"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"r"),s("mo",null,"∗"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"V"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e")]),s("annotation",{encoding:"application/x-tex"},"B = [0.5_R, 0.45_G, 0.35_B][OP] DstFactor * DstValue")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"OP"),s("span",{class:"mclose"},"]"),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"tF"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"Va"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e")])])])])],-1),T=s("p",null,"“OP” 表示我们要执行的运算。默认情况下为“叠加”（Add）。",-1),D=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]"),s("mo",null,"+"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"F"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"r"),s("mo",null,"∗"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"V"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e")]),s("annotation",{encoding:"application/x-tex"},"B = [0.5_R, 0.45_G, 0.35_B]+ DstFactor * DstValue")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"tF"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"Va"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e")])])])])],-1),C=s("p",null,[n("一旦我们取得了第一个运算的值，它就会被 "),s("em",null,"DstValue"),n(" 覆写，因此，其值同样为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0.5_R, 0.45_G, 0.35_B]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])]),n("。 因此我们用“"),s("em",null,"DstFactor"),n(),s("strong",null,"DstColor"),n("”，其值等于当前的 "),s("em",null,"DstValue"),n(" 值。")],-1),G=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"F"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"o"),s("mi",null,"r"),s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]"),s("mo",null,"∗"),s("mi",null,"D"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"V"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e"),s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mn",null,"0.2"),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.2"),s("msub",null,[s("mn",null,"0"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.1"),s("msub",null,[s("mn",null,"2"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"DstFactor [0.5_R, 0.45_G, 0.35_B] * DstValue [0.5_R, 0.45_G, 0.35_B] = [0.25_R, 0.20_G, 0.12_B]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"tF"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"Ds"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"Va"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0.2"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.2"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.1"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])])])],-1),z=s("p",null,"最后，像素的输出颜色为：",-1),O=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mn",null,"0."),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.3"),s("msub",null,[s("mn",null,"5"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]"),s("mo",null,"+"),s("mo",{stretchy:"false"},"["),s("mn",null,"0.2"),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.2"),s("msub",null,[s("mn",null,"0"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.1"),s("msub",null,[s("mn",null,"2"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"B = [0.5_R, 0.45_G, 0.35_B] + [0.25_R, 0.20_G, 0.12_B]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0."),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.3"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0.2"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.2"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.1"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])]),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mn",null,"0.7"),s("msub",null,[s("mn",null,"5"),s("mi",null,"R")]),s("mo",{separator:"true"},","),s("mn",null,"0.6"),s("msub",null,[s("mn",null,"5"),s("mi",null,"G")]),s("mo",{separator:"true"},","),s("mn",null,"0.4"),s("msub",null,[s("mn",null,"7"),s("mi",null,"B")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"B = [0.75_R, 0.65_G, 0.47_B]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0.7"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.6"),s("span",{class:"mord"},[s("span",{class:"mord"},"5"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"G")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0.4"),s("span",{class:"mord"},[s("span",{class:"mord"},"7"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])])])],-1),U=a(`<p>如果我们想在我们的着色器种启用<em>混合</em>，我们必须使用 <code>Blend</code> 命令，后接 <code>SrcFactor</code> 和 <code>DstFactor</code>。</p><p>其语法如下：</p><div class="language-hlsl line-numbers-mode" data-ext="hlsl"><pre class="language-hlsl"><code>Shader <span class="token string">&quot;InspectorPath/shaderName&quot;</span>
<span class="token punctuation">{</span>
  Properties <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
  SubShader
  <span class="token punctuation">{</span>
    Tag <span class="token punctuation">{</span> <span class="token string">&quot;Queue&quot;</span><span class="token operator">=</span><span class="token string">&quot;Transparent&quot;</span> <span class="token string">&quot;RenderType&quot;</span><span class="token operator">=</span><span class="token string">&quot;Transparent&quot;</span> <span class="token punctuation">}</span>
    Blend SrcAlpha OneMinusSrcAlpha
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在我们的着色器中使用<em>混合</em>，需要添加并修改 <code>Render Queue</code>。 我们知道 <code>Queue</code> 标签的默认值为 <code>Geometry</code>，意为我们的物体是不透明的。如果想让我们的物体半透明，那我们必须先将 <code>Queue</code> 改为 <code>Transparent</code>，并添加某种混合。</p><h3 id="_3-5-3-子着色器-alphatomask" tabindex="-1"><a class="header-anchor" href="#_3-5-3-子着色器-alphatomask" aria-hidden="true">#</a> 3.5.3 子着色器 AlphaToMask</h3><h3 id="_3-5-4-子着色器-colormask" tabindex="-1"><a class="header-anchor" href="#_3-5-4-子着色器-colormask" aria-hidden="true">#</a> 3.5.4 子着色器 ColorMask</h3><h3 id="_3-5-5-子着色器-culling-和深度测试" tabindex="-1"><a class="header-anchor" href="#_3-5-5-子着色器-culling-和深度测试" aria-hidden="true">#</a> 3.5.5 子着色器 Culling 和深度测试</h3><h3 id="_3-5-6-子着色器-cull" tabindex="-1"><a class="header-anchor" href="#_3-5-6-子着色器-cull" aria-hidden="true">#</a> 3.5.6 子着色器 Cull</h3><h3 id="_3-5-7-子着色器-zwrite" tabindex="-1"><a class="header-anchor" href="#_3-5-7-子着色器-zwrite" aria-hidden="true">#</a> 3.5.7 子着色器 ZWrite</h3><h3 id="_3-5-8-子着色器-ztest" tabindex="-1"><a class="header-anchor" href="#_3-5-8-子着色器-ztest" aria-hidden="true">#</a> 3.5.8 子着色器 ZTest</h3><h3 id="_3-5-9-子着色器-stencil" tabindex="-1"><a class="header-anchor" href="#_3-5-9-子着色器-stencil" aria-hidden="true">#</a> 3.5.9 子着色器 Stencil</h3><h2 id="_3-6-子着色器通道" tabindex="-1"><a class="header-anchor" href="#_3-6-子着色器通道" aria-hidden="true">#</a> 3.6 子着色器通道</h2><h3 id="_3-6-1-cgprogram-endcg" tabindex="-1"><a class="header-anchor" href="#_3-6-1-cgprogram-endcg" aria-hidden="true">#</a> 3.6.1 CGPROGRAM / ENDCG</h3><h3 id="_3-6-2-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-6-2-数据类型" aria-hidden="true">#</a> 3.6.2 数据类型</h3><h3 id="_3-6-3-cg-hlsl-pragmas" tabindex="-1"><a class="header-anchor" href="#_3-6-3-cg-hlsl-pragmas" aria-hidden="true">#</a> 3.6.3 Cg / HLSL Pragmas</h3><h3 id="_3-6-4-cg-hlsl-include" tabindex="-1"><a class="header-anchor" href="#_3-6-4-cg-hlsl-include" aria-hidden="true">#</a> 3.6.4 Cg / HLSL Include</h3><h3 id="_3-6-5-cg-hlsl-顶点输入与顶点输出" tabindex="-1"><a class="header-anchor" href="#_3-6-5-cg-hlsl-顶点输入与顶点输出" aria-hidden="true">#</a> 3.6.5 Cg / HLSL 顶点输入与顶点输出</h3><h3 id="_3-6-6-cg-hlsl-变量和关联向量" tabindex="-1"><a class="header-anchor" href="#_3-6-6-cg-hlsl-变量和关联向量" aria-hidden="true">#</a> 3.6.6 Cg / HLSL 变量和关联向量</h3><h3 id="_3-6-7-cg-hlsl-顶点着色器阶段" tabindex="-1"><a class="header-anchor" href="#_3-6-7-cg-hlsl-顶点着色器阶段" aria-hidden="true">#</a> 3.6.7 Cg / HLSL 顶点着色器阶段</h3><h3 id="_3-6-8-cg-hlsl-片元着色器阶段" tabindex="-1"><a class="header-anchor" href="#_3-6-8-cg-hlsl-片元着色器阶段" aria-hidden="true">#</a> 3.6.8 Cg / HLSL 片元着色器阶段</h3><h2 id="_3-7-子着色器回退" tabindex="-1"><a class="header-anchor" href="#_3-7-子着色器回退" aria-hidden="true">#</a> 3.7 子着色器回退</h2><hr class="footnotes-sep">`,22),M={class:"footnotes"},N={class:"footnotes-list"},F={id:"footnote1",class:"footnote-item"},L={href:"https://docs.unity.cn/cn/current/Manual/SL-SubShaderTags.html",target:"_blank",rel:"noopener noreferrer"},V=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function I(E,A){const l=e("RouterLink"),p=e("ExternalLinkIcon");return c(),o("div",null,[r(" more "),_,s("p",null,[n("在 "),t(l,{to:"/game_dev/TA/the_unity_shader_bible/introduction_to_the_shader_programming_language/implementation_and_other_concepts.html#_4-4-hlsl-%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%BB%93%E6%9E%84"},{default:u(()=>[n("4.0.4 节")]),_:1}),n("我们会详细介绍函数的结构。 现在，我们只要知道上述例子的结构是正确的，因为函数 "),f,n(" 已经在代码块被放置的位置写过了。 GPU 会先读到 "),q,n(" 然后才继续执行片元阶段 "),S,n("。")]),x,w,B,R,P,T,D,C,G,z,O,U,s("section",M,[s("ol",N,[s("li",F,[s("p",null,[s("a",L,[n("ShaderLab 向子着色器分配标签 - Unity 手册"),t(p)]),n(),V])])])])])}const K=i(y,[["render",I],["__file","properties_commands_and_functions.html.vue"]]);export{K as default};
