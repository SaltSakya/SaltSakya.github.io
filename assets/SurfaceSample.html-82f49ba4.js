import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as e,d as o,a as n,f as a,b as s}from"./app-2685e7e5.js";const l="/assets/SurfaceSample_SimpleRandomSample-c8ba3f0b.png",c="/assets/SurfaceSample_QuatRandomSample-3be7c54b.png",i="/assets/SurfaceSample_Comparation-dd86f5b5.png",u="/assets/SurfaceSample_Extents-94f0f12a.png",r={},k=n("p",null,"PCG 中的随机采样算法。",-1),m=a(`<p>最近在研究 Unreal 的 PCG 框架，想在 Unity 中实现一些相关功能。这里进行简要的记录。</p><p>我将生成一张随机地图的过程分为以下几个步骤：</p><ul><li>生成随机地形</li><li>在随机地形上进行点采样</li><li>填充地形</li></ul><h2 id="生成随机地形" tabindex="-1"><a class="header-anchor" href="#生成随机地形" aria-hidden="true">#</a> 生成随机地形</h2><h2 id="随机点采样" tabindex="-1"><a class="header-anchor" href="#随机点采样" aria-hidden="true">#</a> 随机点采样</h2><p>进行随机点采样其实非常简单，对于一个水平的平面，我们只要在 <code>Min</code> 和 <code>Max</code> 之间的区域取随机数即可：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimpleRandomSameple</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> min<span class="token punctuation">,</span> <span class="token class-name">Vector2</span> max<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Vector<span class="token punctuation">[</span><span class="token punctuation">]</span></span> points<span class="token punctuation">)</span><span class="token punctuation">{</span>
  points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>
      Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>x<span class="token punctuation">,</span> max<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
      Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>y<span class="token punctuation">,</span> max<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一个曲面，比如地形（Terrain），我们可以直接将这些点投影到地形上即可。</p><p>但这样还有一些不完善的地方</p><p>首先我们希望可以直接指定<strong>密度</strong>而不是个数，这样可以保证我们调整边界后，采样点的数量会随之变化，而不必重复指定新的边界下需要有多少个点。</p>`,10),d=n("p",null,[s("这其实也很简单，我们只要通过 面积 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"×")]),n("annotation",{encoding:"application/x-tex"},"\\times")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"×")])])]),s(" 密度 得到采样点的数量即可，后续跟上面的逻辑一致。")],-1),h=a(`<p>但问题又来了，密度需要是一个浮点数，如果计算最后得到的采样点数量是一个小数怎么办？</p><p>我们采用如下的策略</p><ul><li>将采样点分为<strong>整数部分</strong>和<strong>小数部分</strong></li><li>整数部分代表采样点的数量</li><li>小数部分代表采样点数量 +1 的概率</li></ul><p>例如：114.514 代表 有 51.4% 的概率有 115 个采样点，48.6% 的概率有 114 个采样点。</p><p>由此，代码改进如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RandomSameple</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> min<span class="token punctuation">,</span> <span class="token class-name">Vector2</span> max<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> density<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Vector<span class="token punctuation">[</span><span class="token punctuation">]</span></span> points<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 计算数量</span>
  <span class="token class-name">Vector2</span> area <span class="token operator">=</span> max <span class="token operator">-</span> min<span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">float</span></span> floatCount <span class="token operator">=</span> <span class="token punctuation">(</span>area<span class="token punctuation">.</span>x <span class="token operator">*</span> area<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> density<span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">int</span></span> intCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>floatCount<span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>floatCount <span class="token operator">-</span> intCount<span class="token punctuation">)</span> <span class="token punctuation">?</span> intCount<span class="token punctuation">:</span> intCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// 随机采样</span>
  points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>
      Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>x<span class="token punctuation">,</span> max<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
      Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>y<span class="token punctuation">,</span> max<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 Python + pyplot 绘制一个效果图：</p><figure><img src="`+l+'" alt="简单随机采样" tabindex="0" loading="lazy"><figcaption>简单随机采样</figcaption></figure><p>看起来还不错？但我们还是感觉有一些问题，那就是这些点够<strong>随机</strong>，但不够<strong>均匀</strong>。</p><p>我知道，我们就是想要随机的点，这很随机，随机就是会有重合的情况，有疏有密，这很合理，但这并不是我们想得到的结果，我们指定密度的时候是希望任何一个小块的密度也和整体的密度是一致的，而不是有的地方空，有的地方好几个点重合在一起。</p><p>此外，如果我们希望点和点之间有一些间隔呢？我们用这些算法生成树木的时候肯定不想有连体的树木，还要我们手动一个一个去删掉。我们会希望它们之间有一些间隔，用这种算法如何实现呢？简单，只要每次生成一个新的点的时候，遍历一下过去的点，看看新生成的点是否离其他点够远就可以了。但这样有一些问题：</p>',11),v=n("ul",null,[n("li",null,[n("strong",null,"时间复杂度"),s("。毫无疑问，每次新生成一个点，我们都需要遍历之前生成的所有点来判断这个点是否离其他点过近。最好的情况下，每次新生成的点都离过去的点足够远，那我们的时间复杂度就是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"log"),n("mo",null,"⁡"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\log n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，因此这种算法的时间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"log"),n("mo",null,"⁡"),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"∼"),n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∞"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\log n) \\sim O(\\infty)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"∼"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∞"),n("span",{class:"mclose"},")")])])])]),n("li",null,"无限？为啥是无限？因为我们没有办法确定过去生成的点是否已经覆盖了整个区域，如果实际上已经没有任何一个位置离其他点都足够远，而我们还在尝试采样新的点，那就会陷入死循环。")],-1),b=n("p",null,[s("考虑到上述两个问题："),n("strong",null,"不够均匀"),s("和"),n("strong",null,"无法给采样点指定大小"),s("的问题，我们需要一种新的算法。")],-1),g=n("h2",{id:"四分法点采样",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四分法点采样","aria-hidden":"true"},"#"),s(" 四分法点采样")],-1),y=n("p",null,"这是我想到的一种解决方案（应该已经有这种算法了，但我不知道叫什么）。",-1),x=n("p",null,"思路其实很简单，只要我们要在当前区域内采样不止一个点，那就对当前区域进行 4 等分。 由此可分为以下 5 种情况：",-1),w=n("ol",null,[n("li",null,[s("在当前区域采样 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 个点")])],-1),f=n("blockquote",null,[n("p",null,"这个太简单了，我们直接在这个区域随机采样一个点就可以")],-1),_=n("ol",{start:"2"},[n("li",null,[s("在当前区域采样 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"4"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"4n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal"},"n")])])]),s(" 个点（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,">"),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"n > 0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("）")])],-1),M=n("blockquote",null,[n("p",null,"对当前区域进行 4 等分，每个区域采样 n 个点")],-1),V=n("ol",{start:"3"},[n("li",null,[s("在当前区域采样 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"4"),n("mi",null,"n"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"4n + 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 个点（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,">"),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"n > 0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("）")])],-1),q=n("blockquote",null,[n("p",null,"对当前区域进行 4 等分，每个区域采样 n 个点，其中随机一个区域采集 n+1 个点")],-1),C=n("ol",{start:"4"},[n("li",null,[s("在当前区域采样 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"4"),n("mi",null,"n"),n("mo",null,"+"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"4n + 2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2")])])]),s(" 个点（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"≥"),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"n \\geq 0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("）")])],-1),S=n("blockquote",null,[n("p",null,"对当前区域进行 4 等分，每个区域采样 n 个点，其中随机一个区域和其对角采集 n+1 个点")],-1),R=n("ol",{start:"5"},[n("li",null,[s("在当前区域采样 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"4"),n("mi",null,"n"),n("mo",null,"+"),n("mn",null,"3")]),n("annotation",{encoding:"application/x-tex"},"4n + 3")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"3")])])]),s(" 个点（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"≥"),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"n \\geq 0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("）")])],-1),z=n("p",null,"对于 4 等分之后的小区域，递归地重复以上的判断即可。",-1),L=n("blockquote",null,[n("p",null,"对当前区域进行 4 等分，每个区域采样 n+1 个点，其中随机一个区域采集 n 个点")],-1),B=n("figure",null,[n("img",{src:c,alt:"四分法采样",tabindex:"0",loading:"lazy"}),n("figcaption",null,"四分法采样")],-1),O=n("blockquote",null,[n("p",null,"上图的例子中，在指定区域生成了 64 个点，经过若干次等分，最后平均分成了 64 份，每一个小份里都采样一个点即可。")],-1),E=n("p",null,"我们再多生成几个点对比一下：",-1),N=n("figure",null,[n("img",{src:i,alt:"简单采样与四分法采样对比",tabindex:"0",loading:"lazy"}),n("figcaption",null,"简单采样与四分法采样对比")],-1),P=n("blockquote",null,[n("p",null,[s("密度提高之后，效果更是立竿见影，同样是在 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"16"),n("mo",null,"×"),n("mn",null,"16")]),n("annotation",{encoding:"application/x-tex"},"16 \\times 16")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"16"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"16")])])]),s(" 的区域内采样 768 个点，四分法要远比简单采样来的更加均匀美观。")])],-1),X=a('<p><strong>话说回来了，指定点大小的问题呢？</strong></p><p>上述的算法中，相当于指定点大小为 0，如果要指定点大小，那其实只有一个地方会发生变化，那就是采样的时候：</p><figure><img src="'+u+'" alt="指定点大小的采样" tabindex="0" loading="lazy"><figcaption>指定点大小的采样</figcaption></figure><p>我们可以在采样前，指定一个点要占据的区域大小，这个参数成为 <code>Extents</code>，这个参数实际是点大小的一半。</p><p>采样时，只要在对应轴向上，减去这个 <code>Extents</code>，然后在剩余的区域内采样即可。而原本的采样方式就相当于点大小是 0。</p><p>如此一来其实还有一个问题，<strong>如果一个点的大小大于这个区域，要怎么办呢？</strong></p><p>由于点有了大小，那此时密度和点大小会产生矛盾，我们只能取两者中数量较小的一个。</p>',7),Y=n("blockquote",null,[n("p",null,[s("例如 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1"),n("msup",null,[n("mi",null,"m"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"1m^2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])]),s(" 的区域，点密度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"10"),n("mi",{mathvariant:"normal"},"/"),n("msup",null,[n("mi",null,"m"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"10/m^2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"10/"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("，点大小是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"1"),n("mi",null,"m"),n("mo",null,"×"),n("mn",null,"1"),n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"1m\\times 1m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord mathnormal"},"m")])])]),s("，那毫无疑问，点的数量只能取 1。")])],-1),j=a(`<p>至于代码，直接给 Python 的好了:</p><details class="hint-container details"><summary>其他基础代码</summary><blockquote><p>我自己实现了 <code>Bounds</code> 类和重载了运算符的 <code>Vector2</code> 类。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Vector2</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
    
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;({}, {})&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">-</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">-</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">*</span> other<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> other<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__truediv__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">/</span> other<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">/</span> other<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">SqrMagnitude</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>y <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token keyword">def</span> <span class="token function">Magnitude</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>SqrMagnitude<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    
<span class="token keyword">class</span> <span class="token class-name">Bounds</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">=</span> <span class="token builtin">min</span>
        self<span class="token punctuation">.</span><span class="token builtin">max</span> <span class="token operator">=</span> <span class="token builtin">max</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token builtin">max</span> <span class="token operator">-</span> <span class="token builtin">min</span>
        self<span class="token punctuation">.</span>extents <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span>
        self<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">min</span> <span class="token operator">+</span> <span class="token builtin">max</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Bounds({}~{})&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">RandomRange</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> low

<span class="token keyword">def</span> <span class="token function">Clamp</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> value <span class="token operator">&lt;</span> low<span class="token punctuation">:</span>
        <span class="token keyword">return</span> low
    <span class="token keyword">if</span> value <span class="token operator">&gt;</span> high<span class="token punctuation">:</span>
        <span class="token keyword">return</span> high
    <span class="token keyword">return</span> value

<span class="token keyword">def</span> <span class="token function">CalculateCount</span><span class="token punctuation">(</span>bounds<span class="token punctuation">,</span> density<span class="token punctuation">,</span> extents <span class="token operator">=</span> Vector2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    size <span class="token operator">=</span> bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>x <span class="token operator">*</span> bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>y
    floatCount <span class="token operator">=</span> size <span class="token operator">*</span> density
    intCount <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>floatCount<span class="token punctuation">)</span>
    count <span class="token operator">=</span> intCount <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>floatCount <span class="token operator">-</span> intCount<span class="token punctuation">)</span> <span class="token keyword">else</span> intCount<span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">if</span> extents<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> extents<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token punctuation">(</span>extents<span class="token punctuation">.</span>x <span class="token operator">*</span> extents<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">QuatRandomSampleWithExtents</span><span class="token punctuation">(</span>bounds<span class="token punctuation">,</span> density<span class="token punctuation">,</span> extents<span class="token operator">=</span>Vector2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
    
    count <span class="token operator">=</span> CalculateCount<span class="token punctuation">(</span>bounds<span class="token punctuation">,</span> density<span class="token punctuation">)</span>

    Xs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    Ys <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>bounds<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
            _bounds<span class="token punctuation">,</span> _count <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> _count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> _count <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> _bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> extents<span class="token punctuation">.</span>x<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">or</span> _bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> extents<span class="token punctuation">.</span>y<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>
                Xs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomRange<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">.</span>x <span class="token operator">+</span> extents<span class="token punctuation">.</span>x<span class="token punctuation">,</span> _bounds<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">.</span>x <span class="token operator">-</span> extents<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
                Ys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomRange<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">.</span>y <span class="token operator">+</span> extents<span class="token punctuation">.</span>y<span class="token punctuation">,</span> _bounds<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">.</span>y <span class="token operator">-</span> extents<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>

            counts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>_count <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>
            index <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> _count <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                counts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> _count <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
                counts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
                counts<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">-</span> index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> _count <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
                counts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    counts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            
            <span class="token keyword">if</span> counts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>
                    Bounds<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">,</span> 
                           _bounds<span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    counts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> counts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>
                    Bounds<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">+</span> Vector2<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                           _bounds<span class="token punctuation">.</span>center <span class="token operator">+</span> Vector2<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    counts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> counts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>
                    Bounds<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">+</span> Vector2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                           _bounds<span class="token punctuation">.</span>center <span class="token operator">+</span> Vector2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _bounds<span class="token punctuation">.</span>extents<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    counts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> counts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>
                    Bounds<span class="token punctuation">(</span>_bounds<span class="token punctuation">.</span>center<span class="token punctuation">,</span> 
                           _bounds<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    counts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
    <span class="token keyword">return</span> Xs<span class="token punctuation">,</span> Ys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,4);function G(Q,T){return p(),e("div",null,[k,o(" more "),m,d,h,v,b,g,y,x,w,f,_,M,V,q,C,S,R,z,L,B,O,E,N,P,X,Y,j])}const A=t(r,[["render",G],["__file","SurfaceSample.html.vue"]]);export{A as default};
