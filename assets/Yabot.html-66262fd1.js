import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as r,a as e,b as s,e as a,w as n,f as o}from"./app-2685e7e5.js";const p={},u=o('<h1 id="yabot-开发文档" tabindex="-1"><a class="header-anchor" href="#yabot-开发文档" aria-hidden="true">#</a> Yabot 开发文档</h1><p>v 0.1beta</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>Yabot</code> 基于 <code>WebSocket</code> 与 <code>GO-CQHTTP</code> 进行通讯</p><h3 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h3>',5),k={class:"task-list-container"},b=o('<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 基础：表情支持</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 基础：异常处理</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 高级：Applicaiton 热更新</label></li>',3),m={class:"task-list-item"},h=e("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"},null,-1),v={class:"task-list-item-label",for:"task-item-3"},_={class:"task-list-item"},f=e("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",disabled:"disabled"},null,-1),x={class:"task-list-item-label",for:"task-item-4"},y={class:"task-list-item"},E=e("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",disabled:"disabled"},null,-1),H={class:"task-list-item-label",for:"task-item-5"},g=e("h2",{id:"yabot-框架结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#yabot-框架结构","aria-hidden":"true"},"#"),s(" Yabot 框架结构")],-1),w=o(`<h3 id="yabot" tabindex="-1"><a class="header-anchor" href="#yabot" aria-hidden="true">#</a> Yabot</h3><p><code>Yabot</code> 基本上是框架的入口，它包含如下功能:</p><ul><li>实现了 <code>ws</code> 的接口，可以接收和发送 <code>ws</code> 事件，以与 <code>GO-CQHTTP</code> 通讯。</li><li>为下层提供了发送消息的接口，该接口可以给出一个回调，用于处理返回的消息。例如：通过 <code>GO-CQHTTP</code> 查询在线状态，回调则根据返回的结果进行处理，若为隐身，则改为在线。</li><li>打印、存储消息记录，可在 <code>main.py</code> 中设置忽略的消息类型，默认忽略<strong>元事件</strong>类型。</li></ul><blockquote><p>❌ 通常不应修改<br> ✔ 可追加给下层的接口</p></blockquote><h3 id="eventmanager" tabindex="-1"><a class="header-anchor" href="#eventmanager" aria-hidden="true">#</a> EventManager</h3><p><code>EventManager</code> 负责确定收到的事件类型，并在 <code>HandlerMap</code> 查找对应的 <code>EventHandler</code> 来处理。</p><blockquote><p>❌ 通常不应修改<br> ✔ 在 <code>main.py</code> 中修改 <code>HandlerMap</code>，即各个事件对应的 <code>EventHandler</code></p></blockquote><h3 id="eventhandler" tabindex="-1"><a class="header-anchor" href="#eventhandler" aria-hidden="true">#</a> EventHandler</h3><p><code>EventHandler</code> 是所有事件处理器的父类，他包含如下功能：</p><ul><li>处理事件</li><li>追加 <code>Listener</code>：在该事件下注册一个新的 <code>Listener</code>，所有注册的 <code>Listener</code> 会根据他们的优先级 <code>Priority</code> 排序，优先级高的 <code>Listener</code> 会先一步接收到事件信息，并能阻止后续 <code>Listener</code> 接收该信息；</li><li>缓存过往事件，通过 <code>Key(event)</code> 从事件中提取 <code>key</code> 以分门别类缓存事件；</li></ul><blockquote><p>❌ 通常不应修改<br> ✔ 可追加新的 EventHandler 子类<br> ✔ 实现子类时<strong>可能</strong>需要修改的方法：</p><ul><li><code>Key (msg)</code>：这个方法用于提取区分 <code>Event</code> 的 <code>Key</code>，用于缓存过往的 <code>Event</code> 以便后续查找。例如，对于群消息事件，可用群号做 <code>Key</code>，来以群号为区分缓存过往的群消息记录，后续可追溯某个群的消息记录。</li><li><code>Handle (msg)</code>：可以在原有 <code>Handle</code> 的基础上添加需要的功能，但一般来讲需要调用 <code>super().Handle(event)</code> 确保基本功能没有问题</li></ul></blockquote><h2 id="新增应用" tabindex="-1"><a class="header-anchor" href="#新增应用" aria-hidden="true">#</a> 新增应用</h2><p>应用的模板代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Yabot <span class="token keyword">import</span> Yabot

<span class="token comment">#from YaBotCore.CQ import CQ</span>
<span class="token keyword">from</span> YaBotCore<span class="token punctuation">.</span>Handlers<span class="token punctuation">.</span>MessageHandler <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">from</span> Applications<span class="token punctuation">.</span>AppMaster <span class="token keyword">import</span> registListener

<span class="token keyword">class</span> <span class="token class-name">App_Name</span><span class="token punctuation">:</span>
    Priority <span class="token operator">=</span> <span class="token number">2500</span>

    @ registListener<span class="token punctuation">(</span><span class="token punctuation">[</span>GroupMessageHandler<span class="token punctuation">]</span><span class="token punctuation">,</span> Priority<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># TODO: write your code here</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>新应用应保存在 <code>Applications</code> 文件夹内，否则不会被载入；</li><li>类名应为 <code>App_NewAppName</code> 的形式，以确保不会和 <code>Yabot</code> 框架的类重名；</li><li><code>@ registListener([GroupMessageHandler], Priority)</code> 是一个装饰器，当导入该模块时，会自动使装饰的方法注册到指定的 <code>EventHandler</code> 下 <ul><li>第一个参数是要注册的 <code>EventHandler</code> 的<strong>列表</strong>，注意，是列表，即一个处理函数可能同时关注多种事件。</li><li>第二个参数是优先级，你可以直接使用该应用指定的，如果有多个 handler，也可以分别指定不同的优先级。</li></ul></li><li>返回值应为 <code>bool</code>，意为 “Should Block Later Listener？”，但代码中并没有给名字。当返回 <code>True</code> 时，<code>EventHandler</code> 便不会再遍历后续优先级低于（或部分等于）此应用的 <code>Listener</code></li></ul>`,16);function A(Y,B){const t=i("RouterLink"),d=i("Mermaid");return c(),r("div",null,[u,e("ul",k,[b,e("li",m,[h,e("label",v,[s(" 应用：吃什么 "),a(t,{to:"/posts/others/Requirements.html#%E5%90%83%E4%BB%80%E4%B9%88"},{default:n(()=>[s("需求")]),_:1})])]),e("li",_,[f,e("label",x,[s(" 应用：搜图功能 "),a(t,{to:"/posts/others/Requirements.html#%E6%90%9C%E5%9B%BE%E5%8A%9F%E8%83%BD"},{default:n(()=>[s("需求")]),_:1})])]),e("li",y,[E,e("label",H,[s(" 应用：生日祝福 "),a(t,{to:"/posts/others/Requirements.html#%E7%94%9F%E6%97%A5%E7%A5%9D%E7%A6%8F"},{default:n(()=>[s("需求")]),_:1})])])]),g,a(d,{id:"mermaid-50",code:"eJxtU02P2jAQvfMr5lBVRgur3R5RuxKCfkSFqkAvPSGTDMFaxw62YYXa/veO7TibsORgxfOeZ97zjHPJrZ0LXhpeDQphMHdCK1isB7/5TjsYj5/g8xmVW3LFSzQT+KGd2F8G3SCxIukbV4Wk/QTWWArrIitFP/4l3lejT/USraWDDXCD9dOIM3d4xZvW9ZJb50nEoZ0UOfd6PZL+r8WQFhG0dDn3908wW8Eg2Idg9c8A6BvDgriw3Va2bAJzkfuAKJU2GGJ3sD4pYAdt3QhqbdzwXRPfoCqAVVH2CHIu5Y7nzy0eNQEz/GVbcMdvUDb8jAtdApO67OXt3wmwHti91h7kKFcWpAOLFrxBIvxrzM9W0fkdZHa2mukCGXknYcdflxqHE9hpLVO+2QHz5w2vMKuokCc+joDWD1e8OeY+UZujoDtM2NSx43EEirIQYp15BaZSsn7sC8+R7WnJij4QBeyFfJWYHHVHM3kLTWwmYsnr971+MPQner3o5WrO9XIFgO62iQnlYHXCEy5Qle4An+Dx4aHBwkT5BRUNcYx9x0usGl2lGyiKxGOy+aEJM0Ib4S7D1FRHXQz1mxQ3zAxbB+2jSfJfDK9rekMmPNG2XmCjfVsuU8I3pvN8LDWpmz/FU4VDFEJz4WX8BwPPXKg="}),w])}const D=l(p,[["render",A],["__file","Yabot.html.vue"]]);export{D as default};
